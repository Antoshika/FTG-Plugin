#mod by Anonumyc Economy Team


import io
import json
import base64
import requests
import telethon

from telethon.tl import types
from telethon.tl.patched import Message

from typing import List, Union
from time import gmtime

from .. import loader, utils



def get_message_media(message: Message):
    data = None
    if message and message.media:
        data = message.photo or message.sticker or message.video or message.video_note or message.gif or message.web_preview
    return data


def get_entities(entities: types.TypeMessageEntity):
    
    r = []
    if entities:
        for entity in entities:
            entity = entity.to_dict()
            entity["type"] = entity.pop("_").replace("MessageEntity", "").lower()
            r.append(entity)
    return r


def get_message_text(message: Message, reply: bool = False):
    return (
        "üì∑ –§–æ—Ç–æ"
        if message.photo and reply
        else message.file.emoji + " –°–∫–∏—Ç–µ—Ä–û—á–∏–∫"
        if message.sticker and reply
        else "üìπ –í–∏–¥–µ–æ–º—É—Å–æ—Ä–∫–∞"
        if message.video_note and reply
        else "üìπ –í–∏–¥–µ–æ"
        if message.video and reply
        else "üñº –î–∏–ñ—Ñ–ö–∞"
        if message.gif and reply
        else "üìä –û–ø—Ä–æ—Å –≥–µ–π –ª–∏ —Ç—ã?"
        if message.poll
        else "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è FBR"
        if message.geo
        else "üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã —É—á–∏–ª–∫–∏"
        if message.contact
        else f"üéµ –†–∞–∑—Ä—ã–≤ —É—à–µ–π: {strftime(message.voice.attributes[0].duration)}"
        if message.voice
        else f"üéß –ë–ê–°–°–´–´–´–´: {strftime(message.audio.attributes[0].duration)} | {message.audio.attributes[0].performer} - {message.audio.attributes[0].title}"
        if message.audio
        else f"üíæ –í–∏—Ä—É—Å: {message.file.name}"
        if type(message.media) == types.MessageMediaDocument and not get_message_media(message)
        else f"{message.media.emoticon} –î–∞–π—Å: {message.media.value}"
        if type(message.media) == types.MessageMediaDice
        else f"Service message: {message.action.to_dict()['_']}"
        if type(message) == types.MessageService
        else ""
    )


def strftime(time: Union[int, float]):
    t = gmtime(time)
    return (
        (
            f"{t.tm_hour:02d}:"
            if t.tm_hour > 0
            else ""
        ) + f"{t.tm_min:02d}:{t.tm_sec:02d}"
    )
        


@loader.tds
class ShitQuotesMod(loader.Module):
    """
    """

    strings = {
        "name": "–°—Ç–∏–∫–µ—Ä–æ—á–∫–∏",
        "no_reply": "<b>[–°—Ç–∏–∫–µ—Ä–æ—á–∏–∫]</b> –ù–µ–º–∞ —Ä–µ–ø–ª–µ—á–∞–Ω—Å–∫–æ–≥–æ",
        "processing": "<b>[–°—Ç–∏–∫–µ—Ä–æ—á–∏–∫]</b> –©—è, –æ–±—Ä–∞–±–æ—Ç–∞—é...",
        "api_processing": "<b>[–°—Ç–∏–∫–µ—Ä–æ—á–∏–∫]</b> –ñ–¥—É –æ—Ç–≤–µ—Ç–æ—á–∫–∏ –æ—Ç API...",
        "api_error": "<b>[–°—Ç–∏–∫–µ—Ä–æ—á–∏–∫]</b> –®–∏—à–∏–±–∫–∞ API",
        "loading_media": "<b>[–°—Ç–∏–∫–µ—Ä–æ—á–∏–∫]</b> –û—Ç–ø—Ä–∞–≤–∏–ª –ø–æ –ü–æ—á—Ç–µ–†–æ—Å—Å–∏–∏...",
        "no_args_or_reply": "<b>[–°—Ç–∏–∫–µ—Ä–æ—á–∏–∫]</b> –ù–µ—Ç—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ä–µ–ø–ª–∞—è –¥–ª—è –±–∞–∑–∞—Ä–∞",
        "args_error": "<b>[–°—Ç–∏–∫–µ—Ä–æ—á–∏–∫]</b> –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–û—á–∫–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –±–∞–∑–∞—Ä–æ–≤ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ó–∞–ø—Ä–æ—Å–∏–∫ –±–ª—è—Ç—å –±—ã–ª: <code>{}</code>",
        "too_many_messages": "<b>[–°—Ç–∏–∫–µ—Ä–æ—á–∏–∫</b> –°–ª–∏—à–∫–æ–º –¥–æ—Ö—É—è –°–ò–°–ò–ú–ï–°–ò–ö. –ú–∞–∫—Å–∏–º—É–º: <code>{}</code>"
    }

    async def client_ready(self, client: telethon.TelegramClient, db: dict):
        self.client = client
        self.db = db
        self.api_endpoint = "https://quotes.fl1yd.su/generate"
        self.settings = self.get_settings()


    async def qcmd(self, message: types.Message):
        """
        –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã .sq
        """

        return await self.sqcmd(message)


    async def sqcmd(self, message: Message):
        """
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        ‚Ä¢ .sq <–∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π> + <—Ä–µ–ø–ª–∞–π> + <!file - —Å–∫–∏–¥—ã–≤–∞–µ—Ç —Ñ–∞–π–ª–æ–º (–ø–æ –∂–µ–ª–∞–Ω–∏—é)> + <—Ü–≤–µ—Ç (–ø–æ –∂–µ–ª–∞–Ω–∏—é)>
        >>> .sq
        >>> .sq 2 #2d2d2d
        >>> .sq red
        >>> .sq !file
        """

        args: List[str] = utils.get_args(message)
        if not await message.get_reply_message():
            return await utils.answer(
                message, self.strings["no_reply"])

        m = await utils.answer(
            message, self.strings["processing"])

        isFile = "!file" in args
        [count] = [int(arg) for arg in args if arg.isdigit() and int(arg) > 0] or [1]
        [bg_color] = [arg for arg in args if arg != "!file" and not arg.isdigit()] or [self.settings["bg_color"]]

        if count > self.settings["max_messages"]:
            return await utils.answer(
                m, self.strings["too_many_messages"].format(
                    self.settings["max_messages"])
            )

        payload = {
            "messages": await self.quote_parse_messages(message, count),
            "quote_color": bg_color,
            "text_color": self.settings["text_color"]
        }

        if self.settings["debug"]:
            file = open("SQuotesDebug.json", "w")
            json.dump(
                payload, file, indent = 4,
                ensure_ascii = False,
            )
            await message.respond(
                file = file.name)

        await utils.answer(
            m, self.strings["api_processing"])

        r = await self._api_request(payload)
        if r.status_code != 200:
            return await utils.answer(
                m, self.strings["api_error"])

        quote = io.BytesIO(r.content)
        quote.name = "SQuote" + (".png" if isFile else ".webp")

        await utils.answer(m, quote, force_document = isFile)
        return await m[-1].delete()


    async def quote_parse_messages(self, message: Message, count: int):
        payloads = []
        messages = [
            msg async for msg in self.client.iter_messages(
                message.chat_id, count, reverse = True, add_offset = 1,
                offset_id = (await message.get_reply_message()).id,
            )
        ]

        for message in messages:
            avatar = rank = reply_id = reply_name = reply_text = None
            entities = get_entities(message.entities)

            if message.fwd_from:
                if message.fwd_from.from_id:
                    if type(message.fwd_from.from_id) == types.PeerChannel:
                        user_id = message.fwd_from.from_id.channel_id
                    else:
                        user_id = message.fwd_from.from_id.user_id
                    try:
                        user = await self.client.get_entity(user_id)
                    except Exception:
                        name, avatar = await self.get_profile_data(message.sender)
                        return (
                            "–ë–ª—è—Ç—å –¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç—å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —à–∏—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –Ω–∞ —ç—Ç–æ–π –º—É—Å–æ—Ä–∫–µ —Ç–µ–±—è –∑–∞–±–∞–Ω–∏–ª–∏ –ø–æ—Ç–æ–º—É-—á—Ç–æ —Ç—ã –≥—Ä–∏—Ñ–µ—Ä, –∏ –Ω–∏—Ö—É—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
                            None, message.sender.id, name, avatar, "–æ—à–∏–±–∫–∞ :(", None, None, None, None
                        )
                    name, avatar = await self.get_profile_data(user)
                    user_id = user.id

                elif name := message.fwd_from.from_name:
                    user_id = message.chat_id
            else:
                if reply := await message.get_reply_message():
                    reply_id = reply.sender.id
                    reply_name = telethon.utils.get_display_name(reply.sender)
                    reply_text = get_message_text(reply, True) + (
                        ". " + reply.raw_text
                        if reply.raw_text and get_message_text(reply, True)
                        else reply.raw_text or ""
                    )

                user = await self.client.get_entity(message.sender)
                name, avatar = await self.get_profile_data(user)
                user_id = user.id

                if message.is_group and message.is_channel:
                    admins = await self.client.get_participants(message.chat_id, filter = types.ChannelParticipantsAdmins)
                    if user in admins:
                        admin = admins[admins.index(user)].participant
                        rank = admin.rank or ("creator" if type(admin) == types.ChannelParticipantCreator else "admin")

            media = await self.client.download_media(get_message_media(message), bytes, thumb = -1)
            media = base64.b64encode(media).decode() if media else None

            via_bot = message.via_bot.username if message.via_bot else None
            text = (
                (message.raw_text or "") + (
                    (
                        "\n\n" + get_message_text(message)
                        if message.raw_text
                        else get_message_text(message)
                    )
                    if get_message_text(message)
                    else ""
                )
            )

            payloads.append(
                {
                    "text": text,
                    "media": media,
                    "entities": entities,
                    "author": {
                        "id": user_id,
                        "name": name,
                        "avatar": avatar,
                        "rank": rank or "",
                        "via_bot": via_bot
                    },
                    "reply": {
                        "id": reply_id,
                        "name": reply_name,
                        "text": reply_text
                    }
                }
            )

        return payloads


    async def fsqcmd(self, message: Message):
        """
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        ‚Ä¢ .fsq <@ –∏–ª–∏ ID> + <—Ç–µ–∫—Å—Ç> - –∫–≤–æ—Ç–∞ –æ—Ç —é–∑–µ—Ä–∞ —Å @ –∏–ª–∏ ID + —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        >>> .fsq @onetimeusername –í–∞–º –ø–∏–∑–¥–∞
        ‚Ä¢ .fsq <—Ä–µ–ø–ª–∞–π> + <—Ç–µ–∫—Å—Ç> - –∫–≤–æ—Ç–∞ –æ—Ç —é–∑–µ—Ä–∞ —Å —Ä–µ–ø–ª–∞—è + —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        >>> .fsq –Ø –ª–æ—Ö
        ‚Ä¢ .fsq <@ –∏–ª–∏ ID> + <—Ç–µ–∫—Å—Ç> + -r + <@ –∏–ª–∏ ID> + <—Ç–µ–∫—Å—Ç> - –∫–≤–æ—Ç–∞ —Å —Ñ–µ–π–∫–æ–≤—ã–º —Ä–µ–ø–ª–∞–µ–º
        >>> .fsq @Fl1yd —Å–ø–∞—Å–∏–±–æ -r @onetimeusername –¢—ã –∫—Ä—É—Ç–æ–π
        ‚Ä¢ .fsq <@ –∏–ª–∏ ID> + <—Ç–µ–∫—Å—Ç> + -r + <@ –∏–ª–∏ ID> + <—Ç–µ–∫—Å—Ç>; <–∞—Ä–≥—É–º–µ–Ω—Ç—ã> - –∫–≤–æ—Ç–∞ —Å —Ñ–µ–π–∫–æ–≤—ã–º–∏ –º—É–ª—å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        >>> .fsq @onetimeusername –ü–∞—Ü–∞–Ω—ã –∏–∑ @sh1tchannel, –∂–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∞—Ö—É–µ–Ω–Ω—ã–π –±–æ—Ç–Ω–µ—Ç; @elonmuskplssuckmybigdick —á–µ–≤–æ; @Fl1yd –ù–ê–® –ë–û–¢–ù–ï–¢ –õ–£–ß–®–ò–ô -r @elonmuskplssuckmybigdick —á–µ–≤–æ
        """

        args: str = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        if not (args or reply):
            return await utils.answer(
                message, self.strings["no_args_or_reply"])

        m = await utils.answer(
            message, self.strings["processing"])
        try:
            payload = await self.fakequote_parse_messages(args, reply)
        except (IndexError, ValueError):
            return await utils.answer(
                m, self.strings["args_error"].format(
                    message.text)
            )

        if len(payload) > self.settings["max_messages"]:
            return await utils.answer(
                m, self.strings["too_many_messages"].format(
                    self.settings["max_messages"])
            ) 

        payload = {
            "messages": payload,
            "quote_color": self.settings["bg_color"],
            "text_color": self.settings["text_color"]
        }

        if self.settings["debug"]:
            file = open("SQuotesDebug.json", "w")
            json.dump(
                payload, file, indent = 4,
                ensure_ascii = False,
            )
            await message.respond(
                file = file.name)

        await utils.answer(
            m, self.strings["api_processing"])

        r = await self._api_request(payload)
        if r.status_code != 200:
            return await utils.answer(
                m, self.strings["api_error"])

        quote = io.BytesIO(r.content)
        quote.name = "SQuote.webp"

        await utils.answer(m, quote)
        return await m[-1].delete()


    async def fakequote_parse_messages(self, args: str, reply: Message):
        async def get_user(args: str):
            args_, text = args.split(), ""
            user = await self.client.get_entity(
                int(args_[0]) if args_[0].isdigit() else args_[0])

            if len(args_) < 2:
                user = await self.client.get_entity(
                    int(args) if args.isdigit() else args)
            else:
                text = args.split(maxsplit = 1)[1]
            return user, text

        if reply or reply and args:
            user = reply.sender
            name, avatar = await self.get_profile_data(user)
            text = args or ""

        else:
            messages = []
            for part in args.split("; "):
                user, text = await get_user(part)
                name, avatar = await self.get_profile_data(user)
                reply_id = reply_name = reply_text = None

                if " -r " in part:
                    user, text = await get_user(''.join(part.split(" -r ")[0]))
                    user2, text2 = await get_user(''.join(part.split(" -r ")[1]))

                    name, avatar = await self.get_profile_data(user)
                    name2, _ = await self.get_profile_data(user2)

                    reply_id = user2.id
                    reply_name = name2
                    reply_text = text2

                messages.append(
                    {
                        "text": text,
                        "media": None,
                        "entities": None,
                        "author": {
                            "id": user.id,
                            "name": name,
                            "avatar": avatar,
                            "rank": ""
                        },
                        "reply": {
                            "id": reply_id,
                            "name": reply_name,
                            "text": reply_text
                        }
                    }
                )
            return messages

        return [
            {
                "text": text,
                "media": None,
                "entities": None,
                "author": {
                    "id": user.id,
                    "name": name,
                    "avatar": avatar,
                    "rank": ""
                },
                "reply": {
                    "id": None,
                    "name": None,
                    "text": None
                }
            }
        ]


    async def get_profile_data(self, user: types.User):
        avatar = await self.client.download_profile_photo(user.id, bytes)
        return telethon.utils.get_display_name(user), \
            base64.b64encode(avatar).decode() if avatar else None


    async def sqsetcmd(self, message: Message):
        """
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        ‚Ä¢ .sqset <bg_color/text_color/debug> (<—Ü–≤–µ—Ç –¥–ª—è bg_color/text_color> <True/False –¥–ª—è debug>)
        >>> .sqset bg_color #2d2d2d
        >>> .sqset debug true
        """

        args: List[str] = utils.get_args_raw(message).split(maxsplit = 1)
        if not args:
            return await utils.answer(
                message,
                f"<b>[–°—Ç–∏–∫–µ—Ä–æ—á–∏–∫]</b> –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                f"–£–∂–µ –≤—ã—à–µ –∫—Ä—ã—à–∏ —Å–æ–æ–±–µ—â–Ω–∏–π (<code>max_messages</code>): {self.settings['max_messages']}\n"
                f"–¶–≤–µ—Ç –∫–≤–æ—Ç—ã (<code>bg_color</code>): {self.settings['bg_color']}\n"
                f"–¶–≤–µ—Ç –ø–∏—Å–∞–Ω–∏–Ω—ã (<code>text_color</code>): {self.settings['text_color']}\n"
                f"–î–µ–±–∞–≥ (<code>debug</code>): {self.settings['debug']}\n\n"
                f"–°–ª–æ–º–∞—Ç—å –∏ –∑–∞—Ö—É—è—á–∏—Ç—å –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é <code>.sqset</code> <–ø–∞—Ä–∞–º–µ—Ç—Ä> <–∑–Ω–∞—á–µ–Ω–∏–µ> –∏–ª–∏ –±–ª—è—Ç—å <code>reset</code>"
            )

        if args[0] == "reset":
            self.get_settings(True)
            return await utils.answer(
                message, "<b>[–°—Ç–∏–∫–µ—Ä–æ—á–∏–∫ - –ù–∞—Å—Ç—Ä–æ–µ—á–∫–∏]</b> –ù–∞—Å—Ç–æ–π–∫–∏ –∫–≤–æ—Ç –±—ã–ª–∏ –Ω–∞—Ö—É–π —Å–±—Ä–æ—à–µ–Ω—ã")

        if len(args) < 2:
            return await utils.answer(
                message, "<b>[SQuotes - Settings]</b> –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –±–∞–∑–∞—Ä–∞")

        mods = ["max_messages", "bg_color", "text_color", "debug"]
        if args[0] not in mods:
            return await utils.answer(
                message, f"<b>[–°—Ç–∏–∫–µ—Ä–æ—á–∏–∫ - –ù–∞—Å—Ç—Ä–æ–µ—á–∫–∏]</b> –¢–∞–∫–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ä—Ç–∞ –Ω–µ—Ç—É –≤ –Ω–∞–ª–∏—á–∏–∏ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞, –µ—Å—Ç—å {', '.join(mods)}")

        elif args[0] == "debug":
            if args[1].lower() not in ["true", "false"]:
                return await utils.answer(
                    message, "<b>[–°—Ç–∏–∫–µ—Ä–æ—á–∏–∫ - –ù–∞—Å—Ç—Ä–æ–µ—á–∫–∏]</b> –¢–∞–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ—Ç, –µ—Å—Ç—å true/false")
            self.settings[args[0]] = args[1].lower() == "true"

        elif args[0] == "max_messages":
            if not args[1].isdigit():
                return await utils.answer(
                    message, "<b>[–°—Ç–∏–∫–µ—Ä–æ—á–∏–∫ - –ù–∞—Å—Ç—Ä–æ–µ—á–∫–∏]</b> –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –µ–±–ª–∞–Ω")
            self.settings[args[0]] = int(args[1])

        else:
            self.settings[args[0]] = args[1]

        self.db.set("SQuotes", "settings", self.settings)
        return await utils.answer(
            message, f"<b>[–°—Ç–∏–∫–µ—Ä–æ—á–∏–∫ - –ù–∞—Å—Ç—Ä–æ–µ—á–∫–∏]</b> –ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {args[0]} –±—ã–ª–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ —ç—Ç—É —Ö—É–π–Ω—é {args[1]}")


    def get_settings(self, force: bool = False):
        settings: dict = self.db.get(
            "SQuotes", "settings", {}
        )
        if not settings or force:
            settings.update(
                {
                    "max_messages": 15,
                    "bg_color": "#162330",
                    "text_color": "#fff",
                    "debug": False
                }
            )
            self.db.set("SQuotes", "settings", settings)

        return settings


    async def _api_request(self, data: dict):
        return await utils.run_sync(
            requests.post, self.api_endpoint, json = data)